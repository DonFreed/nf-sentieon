/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTQC' {
        ext.args = '--quiet'
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            enabled: false
        ]
    }

    withName: 'SENTIEON_BWAINDEX' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_BWAMEM' {
        ext.args = '-K 10000000'
        ext.prefix = { "${meta.id}.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/bam" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_DRIVER_METRICS' {
        ext.args = { "--algo MeanQualityByCycle ${meta.id}.mq_metrics.txt --algo QualDistribution ${meta.id}.qd_metrics.txt --algo GCBias --summary ${meta.id}.gc_summary.txt ${meta.id}.gc_metrics.txt --algo AlignmentStat --adapter_seq '' ${meta.id}.aln_metrics.txt --algo InsertSizeMetricAlgo ${meta.id}.is_metrics.txt" }
        publishDir = [
            path: { "${params.outdir}/qc_metrics" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_PLOT_GCBIAS' {
        ext.args = { "GCBias -o ${meta.id}.gc-report.pdf" }
        publishDir = [
            path: { "${params.outdir}/qc_metrics" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_PLOT_QUALDISTRIBUTION' {
        ext.args = { " QualDistribution -o ${meta.id}.qd-report.pdf" }
        publishDir = [
            path: { "${params.outdir}/qc_metrics" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_PLOT_MEANQUALITYBYCYCLE' {
        ext.args = { "MeanQualityByCycle -o ${meta.id}.mq-report.pdf" }
        publishDir = [
            path: { "${params.outdir}/qc_metrics" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_PLOT_INSERTSIZEMETRICS' {
        ext.args = { "InsertSizeMetricAlgo -o ${meta.id}.is-report.pdf" }
        publishDir = [
            path: { "${params.outdir}/qc_metrics" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_DRIVER_LOCUSCOLLECTOR' {
        ext.args = { "--algo LocusCollector --fun score_info ${meta.id}.score.txt" }
        publishDir = [
            path: { "${params.outdir}/bam" },
            enabled: false
        ]
    }

    withName: 'SENTIEON_DRIVER_DEDUP' {
        ext.args = { "--algo Dedup --score_info ${meta.id}.score.txt --metrics ${meta.id}.dedup_metrics.txt ${meta.id}.dedup.${params.output_dedup_bam ? 'bam' : 'cram'}" }
        publishDir = [
            [
                path: { "${params.outdir}/bam" },
                mode: 'copy',
                pattern: '*.{bam,bai,cram,crai}'
            ],
            [
                path: { "${params.outdir}/qc_metrics" },
                mode: 'copy',
                pattern: '*.txt'
            ],
        ]
    }

    withName: 'SENTIEON_DRIVER_QUALCAL_RECAL_PRE' {
        ext.args = { "--algo QualCal ${meta.id}.recal_data.table" }
        publishDir = [
            path: { "${params.outdir}/recalibration" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_DRIVER_QUALCAL_RECAL_POST' {
        ext.args = { "-q ${meta.id}.recal_data.table --algo QualCal ${meta.id}.recal_data.table.post" }
        publishDir = [
            path: { "${params.outdir}/recalibration" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_DRIVER_QUALCAL_RECAL_PLOT' {
        ext.args = { "--algo QualCal --plot --before ${meta.id}.recal_data.table --after ${meta.id}.recal_data.table.post ${meta.id}.recal.csv" }
        publishDir = [
            path: { "${params.outdir}/recalibration" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_PLOT_QUALCAL' {
        ext.args = { "QualCal -o ${meta.id}.recal_plots.pdf" }
        publishDir = [
            path: { "${params.outdir}/recalibration" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_DRIVER_HAPLOTYPER' {
        ext.args = { "-q ${meta.id}.recal_data.table --algo Haplotyper ${meta.id}.output-hc.vcf.gz" }
        publishDir = [
            path: { "${params.outdir}/haplotyper" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}
